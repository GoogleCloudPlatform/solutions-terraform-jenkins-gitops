/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

pipeline {
  agent {
      label "terraform-exec"
  }
  stages {
    stage('TF init & validate') {
      when { anyOf {branch "prod";branch "dev";changeRequest() } }
      steps {
        container('terraform') {
          sh '''echo ""
          echo "*************** TERRAFOM INIT and VALIDATE ******************"
          echo "******* At environment: ${env.BRANCH_NAME} ********"
          echo "*************************************************"
          echo ""
          cd example-pipelines/environments/${env.BRANCH_NAME}
          terraform init
          terraform validate'''
        }
      }
    }
    stage('TF plan') {
      when { anyOf {branch "prod";branch "dev";changeRequest() } }
      steps {
        container('terraform') {
          sh '''echo ""
          echo "*************** TERRAFOM Plan ******************"
          echo "******* At environment: ${env.BRANCH_NAME} ********"
          echo "*************************************************"
          echo ""
          cd example-pipelines/environments/${env.BRANCH_NAME}
          terraform plan --out=test.out'''
        }
      }
    }
    stage('Wait for Appproval') {
      when { anyOf {branch "prod";branch "dev" } }
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
        }
      }
    }
    stage('TF Apply') {
      when { anyOf {branch "prod";branch "dev" } }
      steps {
        container('terraform') {
          sh '''echo ""
          echo "*************** TERRAFOM APPLY ******************"
          echo "******* At environment: ${env.BRANCH_NAME} ********"
          echo "*************************************************"
          echo ""
          cd example-pipelines/environments/${env.BRANCH_NAME}
          terraform apply -input=false test.out'''
        }
      }
    }
  }
}
