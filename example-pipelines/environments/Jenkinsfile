/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

pipeline {
  agent {
      label "terraform-exec"
  }
  stages {
    stage('TF init & validate') {
      when { anyOf {branch "prod";branch "dev";changeRequest() } }
      steps {
        container('terraform') {
          sh '''
          if [ -d "example-pipelines/environments/$CHANGE_TARGET/" ]; then
            cd example-pipelines/environments/${CHANGE_TARGET}
            terraform init
            terraform validate
          else
            for dir in example-pipelines/environments/*/
            do 
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFOM INIT and VALIDATE ******************"
              echo "******* At environment: ${env} ********"
              echo "*************************************************"
              terraform init || exit 1
              terraform validate || exit 1
              cd ../../../
            done
          fi'''
        }
      }
    }
    stage('TF plan') {
      when { anyOf {branch "prod";branch "dev";changeRequest() } }
      steps {
        container('terraform') {
          sh '''
          if [ -d "example-pipelines/environments/$CHANGE_TARGET/" ]; then
            cd example-pipelines/environments/${CHANGE_TARGET}
            terraform plan
          else
            for dir in example-pipelines/environments/*/
            do 
              cd ${dir}
              env=${dir%*/}
              env=${env#*/}
              echo ""
              echo "*************** TERRAFOM PLAN ******************"
              echo "******* At environment: ${env} ********"
              echo "*************************************************"
              terraform plan || exit 1
              cd ../../../
            done
          fi'''
        }
      }
    }
    stage('Wait for Appproval') {
      when { anyOf {branch "prod";branch "dev" } }
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
        }
      }
    }
    stage('TF Apply') {
      when { anyOf {branch "prod";branch "dev" } }
      steps {
        container('terraform') {
          sh '''
          env
          if [ -d "example-pipelines/environments/$BRANCH_NAME/" ]; then
            cd example-pipelines/environments/${BRANCH_NAME}
            terraform apply -input=false --auto-approve test.out
          else
            echo "*************** SKIPPING APPLY ******************"
            echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
            echo "*************************************************"
          fi'''
        }
      }
    }
  }
}
